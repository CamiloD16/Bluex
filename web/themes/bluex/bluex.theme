<?php declare(strict_types = 1);

use Drupal\file\Entity\File;
use Drupal\Core\Url;
use Drupal\media\Entity\Media;
use Drupal\image\Entity\ImageStyle;
use Drupal\media_entity\MediaInterface;
use Drupal\node\Entity\Node;

/**
 * @file
 * Functions to support theming in the bluex theme.
 */

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function bluex_preprocess_html(array &$variables): void {

}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function bluex_preprocess_page(array &$variables): void {

}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function bluex_preprocess_node(array &$variables): void {
  if ($author = $variables['node']->getOwner()) {
    $user_picture_field = $author->get('user_picture');

    if (!$user_picture_field->isEmpty()) {

      $user_picture_item = $user_picture_field->first();
      $file_entity = $user_picture_item->entity;

      if ($file_entity) {
        // Get the URL of the file.
        $file_url_generator = \Drupal::service('file_url_generator');
        $author_picture_url = $file_url_generator->generateAbsoluteString($file_entity->getFileUri());

        $variables['author_picture_url'] = $author_picture_url;
      }
    }
  }
}

/**
 * Helper function to set background and text colors based on field value.
 *
 * @param \Drupal\paragraphs\Entity\Paragraph $paragraph
 *   The paragraph entity.
 * @param string $field_name
 *   The name of the field to evaluate.
 * @return array
 *   An array containing background and text colors.
 */
function setBackgroundColor($paragraph, $field_name) {
  $background_value = $paragraph->{$field_name}->value;
  return $background_value == 1 ? ['bg-gray-900', 'text-white'] : ['bg-white', 'text-black'];
}

/**
 * Implements hook_preprocess_paragraph().
 */
function bluex_preprocess_paragraph(array &$variables): void {

  $paragraph = $variables['paragraph'];

  if ($paragraph->getType() == 'hero') {

    // Get the image url and alt text.
    if (!empty($paragraph->field_image_media->entity)) {
      $image_uri = $paragraph->field_image_media->entity->field_media_image->entity->getFileUri();
      $image_url = \Drupal::service('file_url_generator')->generateAbsoluteString($image_uri);

      $alt_text = $paragraph->field_image_media->entity->field_media_image->alt;

      $variables['image_url'] = $image_url;
      $variables['alt_text'] = $alt_text;
    }

    // Change the background color.
    $background_color = setBackgroundColor($paragraph, 'field_background_color');
    $variables['background_color'] = $background_color[0];
    $variables['text_color'] = $background_color[1];

    // Change the position image.
    $position_image_value = $paragraph->field_controller_position->value;
    $variables['image_position'] = $position_image_value;
  }

  if ($paragraph->getType() == 'cards_title_description') {
    // Change the background color.
    $background_value = $paragraph->getParentEntity()->field_cards_background_color->value;
    $background_color = ($background_value == 1) ? ['bg-gray-900', 'text-white'] : ['bg-white', 'text-black'];

    $variables['background_color'] = $background_color[0];
    $variables['text_color'] = $background_color[1];
  }

  if ($paragraph->getType() == 'endorsement') {
    // Change the background color.
    $background_color = setBackgroundColor($paragraph, 'field_background_color');
    $variables['background_color'] = $background_color[0];
    $variables['text_color'] = $background_color[1];
  }

  if ($paragraph->getType() == 'soft_banner') {
    // Change the background color.
    $background_color = setBackgroundColor($paragraph, 'field_background_color');
    $variables['background_color'] = $background_color[0];
    $variables['text_color'] = $background_color[1];
  }

  if ($paragraph->getType() == 'carousel') {
    // Get the image URL and the alt text.
    if (!empty($paragraph->field_image_media->entity)) {
      // Reemplaza 'field_media_image' con el nombre de tu campo de imagen en la entidad de medios.
      $image_entity = $paragraph->field_image_media->entity->get('field_media_image')->entity;

      // Verifica si hay una imagen asociada.
      if ($image_entity) {
        // Obtiene el servicio 'file_url_generator'.
        $file_url_generator = \Drupal::service('file_url_generator');

        // Obtiene la URL de la imagen.
        $image_url = $file_url_generator->generateAbsoluteString($image_entity->getFileUri());
        $alt_text = $paragraph->field_image_media->alt;
        $variables['image_url'] = $image_url;
        $variables['alt_text'] = $alt_text;
      }
    }
  }
}

/**
 * Implements template_preprocess_block__system_menu_block().
 */
function bluex_preprocess_block__system_menu_block(&$variables) {
  // Get site name.
  $variables['site_name'] = \Drupal::config('system.site')->get('name');
}